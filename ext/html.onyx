#load "core/onyx/compiler_extension"

use onyx.compiler_extension {*}

use core.conv
use core {
    eprintf
    tprintf
    Result
}

main :: () {
    ext := ExtensionContext.make("Generate View Procedures for Templating")
    ext->handle_macro("new_html_element", handle_html)
    ext->start(message_handler)
}

handle_html :: (
    ext: &ExtensionContext,
    em: ExpansionInfo
) -> Result(str, ExpansionFailureReason) {

    code: dyn_str

    elements := em.body |> str.split(',')

    for element in elements {
        element = element |> str.strip_whitespace()
        procname: str
        if element == "main" {
            procname = "vmain"
        } else {
            procname = element
        }
        code->append(tprintf("
{} :: #match {
    (attrs: HtmlAttr) => ([attrs], args: ..any) -> js.Value {
        new_el := get_dom() 
        |> create(\"{}\")

        // attr_apply_html(attrs, new_el)
        //
        new_el |> attrs->apply()
        //
        // for attr in attrs {
        //     new_el |> attr()
        // }

        for arg in args {
            new_el |> view_select(arg.type, arg);
        }
        return new_el
    }
    (attrs: HtmlAttr, args: ..any) -> js.Value {
        new_el := get_dom() 
        |> create(\"{}\")

        new_el |> attrs->apply()

        for arg in args {
            new_el |> view_select(arg.type, arg);
        }
        return new_el
    }
    (args: ..any) -> js.Value {
        new_el := get_dom() 
        |> create(\"{}\")
        for arg in args {
            new_el |> view_select(arg.type, arg);
        }
        return new_el
    }
}
        ", procname, element, element, element))
    }
    // eprintf("{p}\n\n", cast(str) code)
    return .{ Ok = code }
}

message_handler :: (ext, msg) => {
    // Print debugging an extensions requires you to print
    // to standard error, so you have to use 'eprintf'
    // eprintf("Message: {p}\n", msg)

    switch msg {
        case .ExpandMacro as em {
            // Every macro expansion needs a response, even if it
            // is not supported, otherwise the compiler will hang.
            ext->send(.{
                Expansion = .{
                    id = em.id,
                    code = .{ Err = .NotSupported }
                }
            })
        }

        case _ {}
    }
}