#load "core/onyx/compiler_extension"

use onyx.compiler_extension {*}

use core.conv
use core {
    eprintf
    tprintf
    Result
}

main :: () {
    ext := ExtensionContext.make("Generate Event Procedures for Listening")
    ext->handle_macro("new_event_listener", handle_event)
    ext->start(message_handler)
}

handle_event :: (
    ext: &ExtensionContext,
    em: ExpansionInfo
) -> Result(str, ExpansionFailureReason) {

    code: dyn_str

    events := em.body |> str.split(',')


// Beginning of "on" struct {{{
    code->append("on :: struct {")

    for event in events {
        event = event |> str.strip_whitespace()
        code->append(tprintf("
{} :: #match {
    (el: $T, func: (T) -> void) -> #auto {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: (T) -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> void) -> #auto {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"{}\", js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }
}
        ", event, event, event, event, event, event, event, event, event))
    }

        code->append(tprintf("
click_outside :: #match {
    (el: $T, func: (T) -> void) -> #auto {
        js.Global->get(\"document\")->call(\"addEventListener\", \"click\", js.func((this, args, [el, func]) => {
            if el != js.Global->get(\"event\")->get(\"target\") {
                func(el);
            }
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: (T) -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> void) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
}
        "))

        code->append(tprintf("
submit_prevent :: #match {
    (el: $T, func: (T) -> void) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: (T) -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> void) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, func: () -> js.Value) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: (js.Value) -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
    (func: () -> js.Value) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            func();
            return js.Undefined;
        }));
        return el;
    }
}
        "))

        code->append(tprintf("
submit_formdata :: #match {
    (el: js.Value, func: (Map(str, str)) -> void) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            el |> get_form() |> func()
            return js.Undefined;
        }));
        return el;
    }

    (el: js.Value, func: (Map(str, str)) -> Map(str, str)) -> #auto {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            el |> get_form() |> func()
            return js.Undefined;
        }));
        return el;
    }
    (func: (Map(str, str)) -> void) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            el |> get_form() |> func()
            return js.Undefined;
        }));
        return el;
    }
    (func: (Map(str, str)) -> Map(str, str)) => ([func] el: js.Value) -> js.Value {
        el->call(\"addEventListener\", \"submit\", js.func((this, args, [el, func]) => {
            js.Global->get(\"event\")->call(\"preventDefault\");
            el |> get_form() |> func()
            return js.Undefined;
        }));
        return el;
    }
}
        "))

        code->append("}")
// End of "on" struct }}}

        code->append(tprintf("
listen :: #match {
    (el: $T, event: str, func: (T) -> void) -> #auto {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, event: str, func: (T) -> js.Value) -> #auto {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, event: str, func: () -> void) -> #auto {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }

    (el: $T, event: str, func: () -> js.Value) -> #auto {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (event: str, func: (js.Value) -> void) => ([event, func] el: js.Value) -> js.Value {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (event: str, func: (js.Value) -> js.Value) => ([event, func] el: js.Value) -> js.Value {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func(el);
            return js.Undefined;
        }));
        return el;
    }
    (event: str, func: () -> void) => ([event, func] el: js.Value) -> js.Value {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }
    (event: str, func: () -> js.Value) => ([event, func] el: js.Value) -> js.Value {
        get_dom()->call(\"addEventListener\", event, js.func((this, args, [el, func]) => {
            func();
            return js.Undefined;
        }));
        return el;
    }
}

trigger :: (name: str) -> void {
    event := js.Global->get(\"CustomEvent\")->new(name)
    get_dom()->call(\"dispatchEvent\", event);
    event->release()
}
        "))


    // eprintf("{p}\n\n", cast(str) code)
    return .{ Ok = code }
}

message_handler :: (ext, msg) => {
    // Print debugging an extensions requires you to print
    // to standard error, so you have to use 'eprintf'
    // eprintf("Message: {p}\n", msg)

    switch msg {
        case .ExpandMacro as em {
            // Every macro expansion needs a response, even if it
            // is not supported, otherwise the compiler will hang.
            ext->send(.{
                Expansion = .{
                    id = em.id,
                    code = .{ Err = .NotSupported }
                }
            })
        }

        case _ {}
    }
}