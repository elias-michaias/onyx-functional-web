package sword

use core {*}
use core.misc {*}
use core.intrinsics.types {type_is_function}

// init {{{

Runtime :: struct {
    signal_values: [..] any;
    running_effect: ? u32;

    signal_subscribers: Map(u32, Set(u32));
    effects: [..] () -> void;

    effect_arena: alloc.arena.Arena;

    true_signals: [..] any
    signal_store: Map(str, u32)
}

reactive_runtime: Runtime;

#init () {
    r: Runtime;
    r.effect_arena = alloc.arena.make(context.allocator, 16 * 1024);
    reactive_runtime = r;
}

// init }}}

// reaction logic {{{

signal :: (value: $T) -> Signal(T) {
    reactive_runtime.signal_values->push(.{ data = alloc.on_heap(value), type = T });
    id := reactive_runtime.signal_values.length - 1;
    output := Signal(T).{ &reactive_runtime, id }
    reactive_runtime.true_signals->push(output)
    return output
}

rw_signal :: (value: $T) => {
    reactive_runtime.signal_values->push(.{ data = alloc.on_heap(value), type = T });
    id := reactive_runtime.signal_values.length - 1;
    output := Signal(T).{ &reactive_runtime, id };
    getter: () -> T = ([output]) => output->get()
    setter: (T) -> void = ([output], value) => output->set(value)
    return getter, setter
}

effect :: (f: () -> void) => {
    reactive_runtime.effects->push(alloc.copy_closure(f, alloc.as_allocator(&reactive_runtime.effect_arena)));
    id := reactive_runtime.effects.length - 1;
    run_effect(id);
}

run_effect :: (effect_id: u32) {
    prev_running_effect := reactive_runtime.running_effect;
    reactive_runtime.running_effect = effect_id;
    id_effect := reactive_runtime.effects[effect_id];
    id_effect();
    reactive_runtime.running_effect = prev_running_effect;
}

memo :: (f: () -> $R) -> Signal(R) {
    output := f() |> signal()
    effect(([output, f]) => { 
        output->set(f())
    })
    return output
}

bind :: (el: js.Value, f: (js.Value) -> void) -> js.Value {
    effect(([f, el]) => { 
        f(el)
    })
    return el
}

Signal :: struct (T: type_expr) {
    cx: &Runtime;
    id: u32;
}

Signal.get :: (self: #Self) -> self.T {
    v := self.cx.signal_values[self.id];

    self.cx.running_effect->with([ef] {
        subs := self.cx.signal_subscribers->get_ptr_or_create(self.id);
        subs->insert(ef);
    });

    return *any_as(v, self.T); 
}

Signal.get_as_type :: (s: rawptr, type: type_expr) -> any {
    Untyped_Signal :: struct {
        cx: &Runtime;
        id: u32;
    }
    us := cast(&Untyped_Signal) s;
    us.cx.running_effect->with([ef] {
        subs := us.cx.signal_subscribers->get_ptr_or_create(us.id);
        subs->insert(ef);
    });
    return us.cx.signal_values[us.id];
}


Signal.set :: #match {
    (self: #Self, value: self.T) {
        v := &self.cx.signal_values[self.id];
        if v.type != self.T do return;

        *cast(&self.T) v.data = value;

        if subs := self.cx.signal_subscribers->get_ptr(self.id); subs {
            listeners := subs->as_iter()
                            ->map(x => *x)
                            ->collect(context.temp_allocator);

            subs->clear();

            for listeners {
                run_effect(it);
            }
        }
    }
    (self: #Self, func: (self.T) -> self.T ) {
        self->get() |> func() |> self->set()
    }
    (self: #Self, func: () -> self.T ) {
        func() |> self->set()
    }
}

Signal.store :: (sig: Signal($T), key: str) -> Signal(T) {
    if !reactive_runtime.signal_store->has(key) {
        reactive_runtime.signal_store->put(key, sig.id)
    }
    return sig
}

signal_store_clear :: () {
    reactive_runtime.signal_store->clear()
}

SignalId :: #distinct u32

signalize :: (key: str) -> SignalId {
    id := reactive_runtime.signal_store->get(key)->unwrap()
    return cast(SignalId) id
}

SignalId.to :: (self: #Self, $T: type_expr) -> Signal(T) {
    id := cast(u32) self;
    val := *any_as(reactive_runtime.signal_values[id], Pair(u32, type_expr))
    return Signal(T).{ &reactive_runtime, val.first }
}

// reaction logic }}}

// dom integration {{{

react_inner :: (el: js.Value, args_: ..any) -> js.Value {
    args := any_deep_copy(args_);
    effect(([el, args]) => {
        result: dyn_str;
        use runtime.info;

        for arg in args {
            if info.struct_constructed_from(arg.type, Signal) {
                signal_type := *cast(&type_expr) arg.type->info()->as_struct().parameters[0].data;
                conv.format_va(&result, "{}", any.[ Signal.get_as_type(arg.data, signal_type) ]);
            } else {
                conv.format_va(&result, "{}", any.[ arg ]);
            }
        }
        el->set("innerHTML", cast(str) result);
    });

    return el;
}

react_outer :: (el: js.Value, args_: ..any) -> js.Value {
    args := any_deep_copy(args_);
    effect(([el, args]) => {
        result: dyn_str;
        use runtime.info;

        for arg in args {
            if info.struct_constructed_from(arg.type, Signal) {
                signal_type := *cast(&type_expr) arg.type->info()->as_struct().parameters[0].data;
                conv.format_va(&result, "{}", any.[ Signal.get_as_type(arg.data, signal_type) ]);
            } else {
                conv.format_va(&result, "{}", any.[ arg ]);
            }
        }
        el->set("outerHTML", cast(str) result);
    });

    return el;
}

react_text :: (el: js.Value, args_: ..any) -> js.Value {
    args := any_deep_copy(args_);
    effect(([el, args]) => {
        result: dyn_str;
        use runtime.info;

        for arg in args {
            if info.struct_constructed_from(arg.type, Signal) {
                signal_type := *cast(&type_expr) arg.type->info()->as_struct().parameters[0].data;
                conv.format_va(&result, "{}", any.[ Signal.get_as_type(arg.data, signal_type) ]);
            } else {
                conv.format_va(&result, "{}", any.[ arg ]);
            }
        }
        el->set("textContent", cast(str) result);
    });

    return el;
}

// dom integration }}}
 
// signal helper methods {{{

    // increment and decrement {{{
    Signal(f32).decrement :: (self: #Self) {
        self->set(self->get() - 1.0)
    }

    Signal(f32).increment :: (self: #Self) {
        self->set(self->get() + 1.0)
    }

    Signal(f64).decrement :: (self: #Self) {
        self->set(self->get() - 1.0)
    }

    Signal(f64).increment :: (self: #Self) {
        self->set(self->get() + 1.0)
    }

    Signal(i16).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(i16).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(i32).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(i32).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(i64).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(i64).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(i8).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(i8).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(u16).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(u16).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(u32).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(u32).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(u64).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(u64).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }

    Signal(u8).decrement :: (self: #Self) {
        self->set(self->get() - 1)
    }

    Signal(u8).increment :: (self: #Self) {
        self->set(self->get() + 1)
    }
    // increment and decrement }}}

Signal(bool).toggle :: (self: #Self) {
    self->set(!self->get())
}

// signal helper methods }}}


// contracts {{{
attr_contract :: #match {
    (el: js.Value, clause: Pair([2] str, #type () -> bool)) -> js.Value {
        effect(([el, clause]) => { 
            true_false := clause.first
            true_attrs := true_false[0] |> str.split(' ')
            false_attrs := true_false[1] |> str.split(' ')
            if clause.second() {
                for attr in false_attrs {
                    if attr == "" do continue
                    key_val := attr |> str.split('=')
                    key := str.strip_whitespace(key_val[0])
                    val := str.strip_whitespace(key_val[1])
                    el |> remove_attr(key)
                }
                for attr in true_attrs {
                    if attr == "" do continue
                    key_val := attr |> str.split('=')
                    key := str.strip_whitespace(key_val[0])
                    val := str.strip_whitespace(key_val[1])
                    if val == "!" {
                        el |> remove_attr(key)
                    } else {
                        el |> set_attr(key, val)
                    }
                }
            } else {
                for attr in true_attrs {
                    if attr == "" do continue
                    key_val := attr |> str.split('=')
                    key := str.strip_whitespace(key_val[0])
                    val := str.strip_whitespace(key_val[1])
                    el |> remove_attr(key)
                }
                for attr in false_attrs {
                    if attr == "" do continue
                    key_val := attr |> str.split('=')
                    key := str.strip_whitespace(key_val[0])
                    val := str.strip_whitespace(key_val[1])
                    if val == "!" {
                        el |> remove_attr(key)
                    } else {
                        el |> set_attr(key, val)
                    }
                }
            }
        })
        return el
    }
    (el: js.Value, clauses: ..Pair([2] str, #type () -> bool)) -> js.Value {
        for clause in clauses do attr_contract(el, clause)
        return el
    }
}

class_contract :: #match {
    (el: js.Value, clause: Pair([2] str, #type () -> bool)) -> js.Value {
        effect(([el, clause]) => { 
            classes := clause.first
            true_classes := classes[0] |> str.split(' ');
            false_classes := classes[1] |> str.split(' ');
            if clause.second() {
                if str.strip_whitespace(classes[0]) != "!" {
                    for class in true_classes {
                        if class != "" do el |> add_class(class)
                    }
                    for class in false_classes {
                        if class != "" do el |> remove_class(class)
                    }
                } else {
                    el |> remove_attr("class")
                }
            } else {
                if str.strip_whitespace(classes[1]) != "!" {
                    for class in false_classes {
                        if class != "" do el |> add_class(class)
                    }
                    for class in true_classes {
                        if class != "" do el |> remove_class(class)
                    }
                } else {
                    el |> remove_attr("class")
                }
            }
        })
        return el
    }
    (el: js.Value, clauses: ..Pair([2] str, #type () -> bool)) -> js.Value {
        for clause in clauses do class_contract(el, clause)
        return el
    }
}

id_contract :: #match {
    (el: js.Value, clause: Pair([2] str, #type () -> bool)) -> js.Value {
        effect(([el, clause]) => { 
        ids := clause.first
            if clause.second() {
                if str.strip_whitespace(ids[0]) == "!" {
                    el |> remove_id()
                } else {
                    el |> set_id(str.strip_whitespace(ids[0]))
                }
            } else {
                if str.strip_whitespace(ids[1]) == "!" {
                    el |> remove_id()
                } else {
                    el |> set_id(str.strip_whitespace(ids[1]))
                }
            }
        })
        return el
    }
    (el: js.Value, clauses: ..Pair([2] str, #type () -> bool)) -> js.Value {
        for clause in clauses do id_contract(el, clause)
        return el
    }
}

style_contract :: #match {
    (el: js.Value, clause: Pair([2] str, #type () -> bool)) -> js.Value {
        effect(([el, clause]) => { 
            styles := clause.first
            true_styles := styles[0] |> str.split(';');
            false_styles := styles[1] |> str.split(';');

            if clause.second() {
                if str.strip_whitespace(styles[0]) != "!" {
                    for style in false_styles {
                        key_val := style |> str.split(':');
                        key := key_val[0] |> str.strip_whitespace();
                        val := key_val[1] 
                        el |> remove_style(key)
                    }
                    for style in true_styles {
                        key_val := style |> str.split(':');
                        key := key_val[0] |> str.strip_whitespace();
                        val := key_val[1] 
                        el |> set_style(key, val)
                    }
                } else {
                    el |> remove_attr("style")
                }
            } else {
                if str.strip_whitespace(styles[1]) != "!" {
                    for style in true_styles {
                        key_val := style |> str.split(':');
                        key := key_val[0] |> str.strip_whitespace();
                        val := key_val[1] 
                        el |> remove_style(key)
                    }
                    for style in false_styles {
                        key_val := style |> str.split(':');
                        key := key_val[0] |> str.strip_whitespace();
                        val := key_val[1] 
                        el |> set_style(key, val)
                    }
                } else {
                    el |> remove_attr("style")
                }
            }
        })
        return el
    }
    (el: js.Value, clauses: ..Pair([2] str, #type () -> bool)) -> js.Value {
        for clause in clauses do style_contract(el, clause)
        return el
    }

}

child_contract :: #match {
    (el: js.Value, clause: Pair([2] js.Value, #type () -> bool)) -> js.Value {
        condition := clause.second

        first := clause.first[0]
        second := clause.first[1]

        first_child := get_dom() |> create("span") |> append(el) |> extend(first)
        second_child := get_dom() |> create("span") |> append(el) |> extend(second)

        effect(([condition, first_child, second_child]) => { 
            if condition() {
                first_child |> set_style("display", "block")
                second_child |> set_style("display", "none")
            } else {
                second_child |> set_style("display", "block")
                first_child |> set_style("display", "none")
            }
        })
        return el
    }
    (el: js.Value, clauses: ..Pair([2] js.Value, #type () -> bool)) -> js.Value {
        for clause in clauses do child_contract(el, clause)
        return el
    }
}

show :: (el: js.Value, clause: #type () -> bool) -> js.Value {
    effect(([el, clause]) => { 
        if clause() {
            el |> set_style("display", "block")
        } else {
            el |> set_style("display", "none")
        }
    })
    return el
}
// contracts }}}