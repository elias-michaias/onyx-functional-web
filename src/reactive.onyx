package reactive

#load "./dom.onyx"
use dom {*}

use core {*}
use core.misc {any_as}
use core.intrinsics.types {type_is_function}

// init {{{
Runtime :: struct {
    signal_values: [..] any;
    running_effect: ? u32;

    signal_subscribers: Map(u32, Set(u32));
    effects: [..] () -> void;

    effect_arena: alloc.arena.Arena;
}

reactive_runtime: Runtime;

#init () {
    r: Runtime;
    r.effect_arena = alloc.arena.make(context.allocator, 16 * 1024);
    reactive_runtime = r;
}
// init }}}

// reaction logic {{{

signal :: (value: $T) -> Signal(T) {
    reactive_runtime.signal_values->push(.{ data = alloc.on_heap(value), type = T });
    id := reactive_runtime.signal_values.length - 1;
    return Signal(T).{ &reactive_runtime, id };
}

effect :: (f: () -> void) {
    reactive_runtime.effects->push(alloc.copy_closure(f, alloc.as_allocator(&reactive_runtime.effect_arena)));
    id := reactive_runtime.effects.length - 1;

    run_effect(id);
}

run_effect :: (effect_id: u32) {
    prev_running_effect := reactive_runtime.running_effect;
    reactive_runtime.running_effect = effect_id;

    effect := reactive_runtime.effects[effect_id];
    effect();

    reactive_runtime.running_effect = prev_running_effect;
}


Signal :: struct (T: type_expr) {
    cx: &Runtime;
    id: u32;
}

Signal.get :: (self: #Self) -> self.T {
    v := self.cx.signal_values[self.id];

    self.cx.running_effect->with([ef] {
        subs := self.cx.signal_subscribers->get_ptr_or_create(self.id);
        subs->insert(ef);
    });

    return *any_as(v, self.T); 
}

Signal.set :: (self: #Self, value: self.T) {
    v := &self.cx.signal_values[self.id];
    if v.type != self.T do return;

    *cast(&self.T) v.data = value;

    if subs := self.cx.signal_subscribers->get_ptr(self.id); subs {
        listeners := subs->as_iter()
                         ->map(x => *x)
                         ->collect(context.temp_allocator);

        subs->clear();

        for listeners {
            run_effect(it);
        }
    }
}

// reaction logic }}}

// dom integration {{{

// Culprit of infinite resolution
// react_inner :: (el: js.Value, signal: Signal($T)) -> js.Value {
//     effect(([signal, el]) => {
//         el |> set_inner(signal->get());
//     });
//     return el;
// }

// dom integration }}}
 