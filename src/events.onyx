package events 

use core.js

/// Attaches a click event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `func`: The function to be called when the click event is triggered.
click :: #match {}

#overload
click :: macro(el: $T, func: (T) -> void) -> #auto {
    el->call("addEventListener", "click", js.func((this, args, [el, func]) => {
        func(el);
        return js.Undefined;
    }));
    return el;
}

#overload
click :: macro(el: $T, func: (T) -> js.Value) -> #auto {
    el->call("addEventListener", "click", js.func((this, args, [el, func]) => {
        func(el);
        return js.Undefined;
    }));
    return el;
}


#overload
click :: macro(el: $T, func: () -> void) -> #auto {
    el->call("addEventListener", "click", js.func((this, args, [el, func]) => {
        func();
        return js.Undefined;
    }));
    return el;
}

#overload
click :: macro(el: $T, func: () -> any) -> #auto {
    el->call("addEventListener", "click", js.func((this, args, [el, func]) => {
        func(el);
        return js.Undefined;
    }));
    return el;
}

/// Attaches a double click event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `func`: The function to be called when the double click event is triggered.
dblclick :: (el: $T, func: (T) -> $R) -> #auto {
    el->call("addEventListener", "dblclick", js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}

/// Attaches a context menu event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `func`: The function to be called when the context menu event is triggered.
contextmenu :: (el: $T, func: (T) -> $R) -> #auto {
    el->call("addEventListener", "contextmenu", js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}   

/// Attaches a mouse enter event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `func`: The function to be called when the mouse enter event is triggered.
mouseenter :: (el: $T, func: (T) -> $R) -> #auto {
    el->call("addEventListener", "mouseenter", js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}

/// Attaches a mouse leave event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `func`: The function to be called when the mouse leave event is triggered.
mouseleave :: (el: $T, func: (T) -> $R) -> #auto {
    el->call("addEventListener", "mouseleave", js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}

// custom events {{{

/// Attaches a custom event listener to the specified element.
/// - `el`: The element to attach the event listener to.
/// - `event`: The name of the custom event.
/// - `func`: The function to be called when the custom event is triggered.
listen :: (el: $T, event: str, func: (T) -> $R) -> #auto {        
    el->call("addEventListener", event, js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}

/// Dispatches a custom event on the specified element.
/// - `el`: The element on which to dispatch the custom event.
/// - `event`: The custom event to be dispatched.
dispatch :: (el: js.Value, event: js.Value) {
    el->call("dispatchEvent", event);
}

/// Creates a new custom event with the specified name.
/// - `event`: The name of the custom event.
event :: (event: str) -> js.Value {
    _event := js.Global->get("CustomEvent")->new(event);
    return _event;
}

// custom events }}}