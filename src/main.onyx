use core.js
use core.conv
use core {
    tprintf
}


// DOM {{{

    get_dom :: () => {
        return js.Global->get("document");
    }

    get_body :: () => {
        return get_dom()->get("body");
    }

    get_head :: () => {
        return get_dom()->get("head");
    }

    create :: (dom: js.Value, new_el: str = "div") -> js.Value {
        el := dom->call("createElement", new_el);
        return el;
    }

    remove :: (el: js.Value) {
        el->call("remove");
    }

    append :: (el: js.Value, target: js.Value) -> js.Value {
        target->call("appendChild", el);
        return el;
    }

    grab :: (el: js.Value, target: js.Value) -> js.Value {
        el->call("appendChild", target);
        return el;
    }

    // id {{{

        query_id :: (dom: js.Value, new_el: str) -> js.Value {
            el := dom->call("getElementById", new_el);
            return el;
        }

        set_id :: (el: js.Value, new_id: $T) -> js.Value {
            el->call("setAttribute", "id", tprintf("{}", new_id));
            return el;
        }

        remove_id :: (el: js.Value) -> js.Value {
            el->call("removeAttribute", "id");
            return el;
        }

        get_id :: (el: js.Value) -> str {
            id := el->get("id");
            return id->as_str()->unwrap();
        }
    
    // id }}}

    // class {{{

        query_class :: (dom: js.Value, new_el: str) -> #auto {
            el := dom->call("getElementByClassName", new_el);
            return el;
        }

        set_class :: (el: js.Value, new_class: $T) -> js.Value {
            el->call("setAttribute", "class", tprintf("{}", new_class));
            return el;
        }

        add_class :: (el: js.Value, new_class: $T) -> js.Value {
            el->get("classList")->call("add", tprintf("{}", new_class));
            return el;
        }

        remove_class :: (el: js.Value, new_class: $T) -> js.Value {
            el->get("classList")->call("remove", tprintf("{}", new_class));
            return el;
        }

        toggle_class :: (el: js.Value, new_class: $T) -> js.Value {
            el->get("classList")->call("toggle", tprintf("{}", new_class));
            return el;
        }

        get_class :: (el: js.Value) -> str {
                class := el->get("className");
                return class->as_str()->unwrap();
        }

    // class }}}

    // attr {{{

        query_attr :: (dom: js.Value, attr: $T) -> js.Value {
            el := dom->call("querySelector", tprintf("{}", attr));
            return el;
        }

        set_attr :: (el: js.Value, attr: $T, val: $T) -> js.Value {
            el->call("setAttribute", tprintf("{}", attr), tprintf("{}", val));
            return el;
        }

        remove_attr :: (el: js.Value, attr: $T) -> js.Value {
            el->call("removeAttribute", tprintf("{}", attr));
            return el;
        }

        get_attr :: (el: js.Value, attr: $T) -> str {
            attribute := el->call("getAttribute", tprintf("{}", attr));
            return attribute->as_str()->unwrap();
        }

    // attr }}}

    inner :: (el: js.Value, args: ..any) -> js.Value {
        result: dyn_str;
        defer delete(&result);
        
        for arg in args {
            conv.format_va(&result, "{}", any.[ arg ]);
        }

        el->set("innerHTML", cast(str) result);
        return el;
    }

    outer :: (el: js.Value, args: ..any) -> js.Value {
        result: dyn_str;
        defer delete(&result);
        
        for arg in args {
            conv.format_va(&result, "{}", any.[ arg ]);
        }

        el->set("outerHTML", cast(str) result);
        return el;
    }


// }}}

// Events {{{

    click :: (el: $T, func: (T) -> $R) -> #auto {
        el->call("addEventListener", "click", js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }
 
    dblclick :: (el: $T, func: (T) -> $R) -> #auto {
        el->call("addEventListener", "dblclick", js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }

    contextmenu :: (el: $T, func: (T) -> $R) -> #auto {
        el->call("addEventListener", "contextmenu", js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }   

    mouseenter :: (el: $T, func: (T) -> $R) -> #auto {
        el->call("addEventListener", "mouseenter", js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }

    mouseleave :: (el: $T, func: (T) -> $R) -> #auto {
        el->call("addEventListener", "mouseleave", js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }

    listen :: (el: $T, event: str, func: (T) -> $R) -> #auto {
        el->call("addEventListener", event, js.func((this, args, [func]) => {
            func(this);
            return js.Undefined;
        }));
        return el;
    }

    dispatch :: (event: str) {
        get_dom()->call("dispatchEvent", event);
    }
    
    event :: (event: str) {
        get_dom()->call("CustomEvent", event);
    }


// }}}

// Miscellaneous {{{

    alert :: (msg: any) {
        js.Global->call("alert", tprintf("{}", msg));
    }

    console_log :: (msg: $T) {
        js.Global->get("console")->call("log", tprintf("{}", msg));
    }

// }}}


main :: () {

    DOM := get_dom();
    body := get_body();
    head := get_head();

    special_div := DOM
    |> query_id("special");

    new_header := DOM
    |> create("h1")
    |> set_id("header")
    |> set_class("head2 head3")
    |> inner("Hello, World!")
    |> append(special_div)
    |> click((el) => {
        el |> get_id() |> console_log();
    });

    second_header := DOM
    |> create("h1")
    |> set_id("heading")
    |> set_class("head12 food")
    |> inner("WORD.");

    event_test := DOM
    |> query_id("grabbable")
    |> listen("burger", (el, [new_header]) => {
        new_header
        |> outer("<h2 id='header' class='head2 head3'>", "BURGER", "</h2>");
    });
    

    textarea := DOM
    |> query_attr("[type='textarea']")
    // |> get_id("textinputarea")
    // |> set_attr("type", "radio")
    |> append(special_div)
    |> mouseenter((el) => {
        el |> get_attr("type") |> console_log();
    });
    

    event("burger");
    console_log(4);

}