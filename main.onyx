#load_all "./src"
use sword.dom {*}
use sword.head {*}
use sword.reactive {*}
use sword.route {*}
use sword.style {*}
use sword.view {*}

ext_html :: #compiler_extension "./ext/html.onyx" { new_html_element }
ext_html.new_html_element!{a, abbr, address, area, article, aside, audio, b, base, bdi, bdo, blockquote, body, br, button, canvas, caption, cite, code, col, colgroup, data, datalist, dd, del, details, dfn, dialog, div, dl, dt, em, embed, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, head, header, hgroup, hr, html, i, iframe, img, input, ins, kbd, keygen, label, legend, li, link, main, map, mark, menu, menuitem, meta, meter, nav, noscript, object, ol, optgroup, option, output, p, param, picture, pre, progress, q, rp, rt, ruby, s, samp, script, section, select, small, source, span, strong, style, sub, summary, sup, table, tbody, td, template, textarea, tfoot, th, thead, time, title, tr, track, u, ul, var, video, wbr}

ext_event :: #compiler_extension "./ext/event.onyx" { new_event_listener }
ext_event.new_event_listener!{abort, afterprint, animationend, animationiteration, animationstart, beforeprint, beforeunload, blur, canplay, canplaythrough, change, click, contextmenu, copy, cut, dblclick, drag, dragend, dragenter, dragleave, dragover, dragstart, drop, durationchange, ended, error, focus, focusin, focusout, fullscreenchange, fullscreenerror, hashchange, input, invalid, keydown, keypress, keyup, load, loadeddata, loadedmetadata, loadstart, message, mousedown, mouseenter, mouseleave, mousemove, mouseout, mouseover, mouseup, mousewheel, offline, online, open, pagehide, pageshow, paste, pause, play, playing, popstate, progress, ratechange, resize, reset, scroll, search, seeked, seeking, select, show, stalled, storage, submit, suspend, timeupdate, toggle, touchcancel, touchend, touchmove, touchstart, transitionend, unload, volumechange, waiting, wheel}

use core.misc
use core.js

toggle_colors :: (input: Signal(bool)) => ([input] el: js.Value) -> js.Value {
    return el |> bind((el, [input]) => {
        if input->get() {
            el |> set_style("color", "blue")
        } else {
            el |> set_style("color", "red")
        }
    })
}

toggle_italic :: (input) => applicator(([input], el) =>
    el |> bind(([input], el) => {
        if input->get() {
            el |> set_style("font-style", "italic")
        } else {
            el |> set_style("font-style", "normal")
        }
    })
)

/* 


*/


main :: () {
    toggleable := signal(false)

    div(
        h1(
            "Hello, World!"
           toggle_italic(toggleable)
           toggle_colors(toggleable)
        ) 
        button("Toggle") |> onclick(([toggleable]) => toggleable->toggle())
    ) 
    |> append(get_body())
} 