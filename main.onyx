use core.js
use core.conv
use core {
    tprintf
}

get_dom :: () => {
    return js.Global->get("document");
}

get_body :: () => {
    return get_dom()->get("body");
}

create :: (dom: js.Value, new_el: str = "div") -> js.Value {
    el := dom->call("createElement", new_el);
    return el;
}

remove :: (el: js.Value) {
    el->call("remove");
}

get_id :: (dom: js.Value, new_el: str) -> js.Value {
    el := dom->call("getElementById", new_el);
    return el;
}

set_id :: (el: js.Value, new_id: $T) -> js.Value {
    el->call("setAttribute", "id", tprintf("{}", new_id));
    return el;
}

get_class :: (dom: js.Value, new_el: str) -> #auto {
    el := dom->call("getElementByClassName", new_el);
    return el;
}

set_class :: (el: js.Value, new_class: $T) -> js.Value {
    el->call("setAttribute", "class", tprintf("{}", new_class));
    return el;
}

add_class :: (el: js.Value, new_class: $T) -> js.Value {
    el->get("classList")->call("add", tprintf("{}", new_class));
    return el;
}

remove_class :: (el: js.Value, new_class: $T) -> js.Value {
    el->get("classList")->call("remove", tprintf("{}", new_class));
    return el;
}

toggle_class :: (el: js.Value, new_class: $T) -> js.Value {
    el->get("classList")->call("toggle", tprintf("{}", new_class));
    return el;
}

append :: (el: js.Value, target: js.Value) -> js.Value {
    target->call("appendChild", el);
    return el;
}

grab :: (el: js.Value, target: js.Value) -> js.Value {
    el->call("appendChild", target);
    return el;
}

inner :: (el: js.Value, args: ..any) -> js.Value {
    result: dyn_str;
    defer delete(&result);
    
    for arg in args {
        conv.format_va(&result, "{}", any.[ arg ]);
    }

    el->set("innerHTML", cast(str) result);
    return el;
}

alert :: (msg: any) {
    js.Global->call("alert", tprintf("{}", msg));
}

click :: (el: $T, func: (T) -> $R) -> #auto {
    el->call("addEventListener", "click", js.func((this, args, [func]) => {
        func(this);
        return js.Undefined;
    }));
    return el;
}

main :: () {

    DOM := get_dom();
    body := get_body();

    x := 0;

    special_div := DOM
    |> get_id("special");

    new_header := DOM
    |> create("h1")
    |> set_id("header")
    |> set_class("head2 head3")
    |> inner("Hello, World!")
    |> append(special_div);

    click_test := DOM
    |> get_id("grabbable")
    |> click((el, [x, special_div]) => {
        x += 1;
        if x < 2 {
            el |> inner("I was clicked ", x, " time!");
        } else {
            el |> inner("I was clicked ", x, " times!");
        }
        el |> grab(special_div);
    });

}